name: Validate Pull Request - PRD
on:
  pull_request:
    branches:
      - master
    paths:
      - 'force-app/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # Verifica se o Pull Request foi cancelado (fechado sem merge)
      - name: Verificar se o evento foi cancelado
        if: github.event.action == 'closed' && github.event.pull_request.merged == false
        run: |
          echo "O Pull Request foi cancelado. Saindo com erro."
          exit 1

      # Realiza o checkout do repositório
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Instalar dependências do sistema e Salesforce CLI
      - name: Instalar dependências do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      # Autenticar com a org PRD
      - name: Autenticar com a org PRD
        run: |
          echo "${{ secrets.AUTH_URL_PRD }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias prd

      # Instalar o plugin sfdx-git-delta
      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      # Criar diretório para o pacote delta
      - name: Criar diretório de saída para o pacote delta
        run: mkdir -p deploy

      # Gerar pacote delta no diretório deploy
      - name: Gerar pacote delta no diretório deploy
        run: |
          sf sgd source delta --from origin/master --to HEAD --output-dir deploy

      # Listar conteúdo do diretório deploy
      - name: Listar conteúdo do diretório deploy
        run: ls -R deploy

      # Exibir conteúdo do package.xml
      - name: Exibir conteúdo do package.xml
        run: cat deploy/package/package.xml

      # Definir tipo de deploy com base no título do PR
      - name: Definir tipo de deploy
        run: |
          echo "O tipo de deploy será baseado no título do PR"
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Tipo de deploy: $PR_TITLE" >> $GITHUB_ENV
          
      # Executar o workflow de Deploy Strategy
      - name: Executar Deploy Strategy
        run: |
          if [ "${{ env.deploy_type }}" == "delta" ]; then
            echo "Tipo de Deploy: Delta"
            sf project deploy start --manifest deploy/package/package.xml --dry-run --test-level RunAllTestsInOrg --target-org prd > deploy/deploy_output.log || true
          else
            echo "Tipo de Deploy: Full"
            sf project deploy start --source-dir force-app --dry-run --test-level RunAllTestsInOrg --target-org prd > deploy/deploy_output.log || true

      # Verificar falhas de componentes no log de deploy
      - name: Verificar falhas de componentes no log de deploy
        run: |
          if grep -i "Component Failures" deploy/deploy_output.log; then
            echo "Falhas de componente detectadas! O deploy falhou."
            cat deploy/deploy_output.log
            exit 1
          fi

      # Exibir o Log de Deploy diretamente no console
      - name: Exibir o Log de Deploy diretamente no console
        run: |
          echo "Log de Deploy - Erros e Detalhes"
          cat deploy/deploy_output.log

      # Definir nome do artefato com org, data e hora
      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="PRD"
          export TZ="America/Sao_Paulo"  # Define o fuso horário para o Brasil (UTC-3)
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')  # Gera o timestamp no fuso horário do Brasil
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Validade_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      # Salvar o package.xml como artefato
      - name: Salvar package.xml
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      # Salvar o Log de Deploy como artefato
      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
