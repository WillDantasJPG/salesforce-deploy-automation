name: Deploy das alterações para PRD
on:
  pull_request:
    types: [closed]
    branches:
      - master
    paths:
      - 'force-app/**'

jobs:
  merge_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar dependências do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      - name: Autenticar com a org PRD
        run: |
          echo "${{ secrets.AUTH_URL_PRD }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias prd

      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Criar diretório de saída para o pacote delta
        run: mkdir -p deploy

      # Definir tipo de deploy com base no título do PR
      - name: Definir tipo de deploy
        id: define-deploy-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Título do PR: $PR_TITLE"
          
          if [[ "$PR_TITLE" == *"delta"* ]]; then
            echo "deploy_type=delta" >> $GITHUB_ENV
          elif [[ "$PR_TITLE" == *"full"* ]]; then
            echo "deploy_type=full" >> $GITHUB_ENV
          else
            echo "deploy_type=full" >> $GITHUB_ENV  # Default para full se não encontrar delta ou full no título
          fi

      - name: Exibir tipo de deploy definido
        run: echo "Tipo de deploy definido: ${{ env.deploy_type }}"

      - name: Gerar pacote delta no diretório deploy (somente se for delta)
        if: env.deploy_type == 'delta'
        run: |
          sf sgd source delta --from HEAD^ --to HEAD --output-dir deploy

      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="PRD"
          export TZ="America/Sao_Paulo"  # Define o fuso horário para o Brasil (UTC-3)
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')  # Gera o timestamp no fuso horário do Brasil
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Deploy_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Listar conteúdo do diretório deploy
        run: ls -R deploy || echo "Diretório deploy está vazio"

      - name: Exibir conteúdo do package.xml (somente se for delta)
        if: env.deploy_type == 'delta'
        run: cat deploy/package/package.xml || echo "Nenhum package.xml encontrado"

      - name: Executar Deploy Strategy
        run: |
          if [ "${{ env.deploy_type }}" == "delta" ]; then
            echo "Tipo de Deploy: Delta"
            sf project deploy start --manifest deploy/package/package.xml --test-level RunAllTestsInOrg --target-org prd > deploy/deploy_output.log || true
          else
            echo "Tipo de Deploy: Full"
            sf project deploy start --source-dir force-app --test-level RunAllTestsInOrg --target-org prd > deploy/deploy_output.log || true

      - name: Salvar package.xml (somente se for delta)
        if: env.deploy_type == 'delta'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
