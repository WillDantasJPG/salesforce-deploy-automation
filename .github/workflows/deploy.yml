name: Deploy das altera√ß√µes para PRD
on:
  pull_request:
    types: [closed]
    branches:
      - master
    paths:
      - 'force-app/**'
jobs:
  merge_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do reposit√≥rio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Instalar depend√™ncias do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      - name: Autenticar com a org PRD
        run: |
          echo "${{ secrets.AUTH_URL_PRD }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias prd

      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      - name: Criar diret√≥rio de sa√≠da para o pacote delta
        run: mkdir -p deploy

      - name: Gerar pacote delta no diret√≥rio deploy
        run: |
          sf sgd source delta --from HEAD^ --to HEAD --output-dir deploy

      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="PRD"
          export TZ="America/Sao_Paulo"  # Define o fuso hor√°rio para o Brasil (UTC-3)
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')  # Gera o timestamp no fuso hor√°rio do Brasil
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Deploy_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      - name: Listar conte√∫do do diret√≥rio deploy
        run: ls -R deploy
        
      - name: Exibir conte√∫do do package.xml
        run: cat deploy/package/package.xml
        

      - name: Converter metadados para deploy
        run: sfdx force:source:convert --manifest=deploy/package/package.xml --outputdir=convert

      - name: Verificar se h√° classes Apex
        id: check-apex
        run: echo "HAS_APEX=$(grep -q '<name>ApexClass</name>' deploy/package/package.xml && echo true || echo false)" >> $GITHUB_ENV

      # **Executar o deploy real diretamente**
      - name: Executar Deploy
        run: |
          set -e  # Para garantir que qualquer erro interrompa o workflow
          if [ "${{ env.HAS_APEX }}" == "true" ]; then
            echo "üöÄ Executando deploy com testes espec√≠ficos."
            sf project deploy start --manifest deploy/package/package.xml --test-level RunSpecifiedTests --tests UtilTest --tests ConciergeControllerTest --tests ConciergeServiceTest  --tests ConciergeControllerTest --tests ConciergeServiceTest --tests AccountControllerTest --tests AccountDATest --tests AccountHelperTest --tests ChecklistDATest --tests ChecklistHelperTest --tests ChecklistControllerTest --tests ChecklistTrigggerHandlerTest --tests ContractSelectorTest --tests ContractControllerTest --tests ContratoServiceTest --tests ContractDATest --tests ContractHelperTest --tests ContractTriggerHandlerTest --tests DocumentacaoDATest --tests DocumentControllerTest --tests DocumentacaoHelperTest --tests QuoteDATest --tests QuoteHelper --tests QuoteHelperTest --tests QueryHelperTest --tests QuoteLineItemHelper --tests QuoteLineItemHelperTest --tests QuoteLineItemTriggerHandler --tests QuoteLineItemTriggerHandlerTest --tests QuoteSyncHelper --tests QuoteSyncHelperTest --tests SalesTeamControllerTest --tests QuoteSyncTriggerHandler --tests QuoteSyncTriggerHandlerTest --tests QuoteTriggerHandler --tests QuoteTriggerHandlerTest --tests AccountContactRelationHelperTest --tests AnaliseCreditoHelperTest --tests AnaliseCreditoTriggerHandlerTest --tests TriggerHandler_Test --tests EmailManagerTest --tests ObjectHelperTest --tests ObjectControllerTest --tests OpportunityHelperTest --tests OpportunityTriggerHandlerTest --tests GerarContratoControllerTest --tests OpportunityDATest --tests IntegrationD4SignTest --tests AnaliseCreditoDATest --tests TemplateDocumentoHelperTest --tests UtilTest --tests TemplateDocumentoTriggerHandlerTest --tests TemplateDocumentoDATest --tests TemplateDocumentoControllerTest --tests TemplateDocumentoDATest --tests EmpreendimentoSelectorTest --tests ComparativoControllerTest --tests ComparativoServiceTest --tests EspelhoVendasControllerTest --tests comissaoControllerTest --tests CotacaoControllerTest --tests EspelhoVendasServiceTest --tests ExtratoTabelaServiceTest --tests ProdutoSelectorTest --tests SeriePagamentoSelectorTest --tests SeriePagamentosServiceTest --tests SimuladorVendasControllerTest --tests SeriePagamentosTriggerHandlerTest --tests SimuladorTelaNegociacaoControllerTest --tests TabelaVendaHandlerTest --tests TabelaVendaSelectorTest --tests TabelaVendasServiceTest --tests TestDataFactoryTest --tests TestDataFactorySimuladorTest --tests UnidadeTabelaSelectorTest --tests UnidadeTabelaServiceTest --tests ParametrizarCriterioServiceTest --tests ParametrizarCriterioControllerTest --target-org prd | tee deploy/deploy_output.log
            else
            echo "Executando deploy sem testes."
            sf project deploy start --manifest deploy/package/package.xml --test-level NoTestRun --target-org prd | tee deploy/deploy_output.log
            fi

           # Verificar falhas no deploy
      - name: Verificar falhas no deploy
        run: |
          # Verifica falhas em componentes
          if grep -qi "Component Failures" deploy/deploy_output.log; then
            echo "‚ùå Falhas de componente detectadas! O deploy falhou."
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verifica falhas em testes
          if grep -qi "Assertion Failed" deploy/deploy_output.log; then
            echo "‚ùå Falhas nos testes detectadas!"
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verifica falhas em testes
          if grep -qi "System.DmlException: Insert failed" deploy/deploy_output.log; then
            echo "‚ùå Falhas nos testes detectadas!"
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verifica cobertura de c√≥digo insuficiente
          if grep -qi "S√£o necess√°rios pelo menos 75% de cobertura do teste" deploy/deploy_output.log; then
            echo "‚ùå Cobertura de c√≥digo insuficiente detectada!"
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verificar se houve falhas durante a execu√ß√£o do dry-run
          if grep -qi "Failed to run" deploy/deploy_output.log; then
            echo "‚ùå O dry-run falhou!"
            cat deploy/deploy_output.log
            exit 1
          fi

          echo "‚úÖ Deploy validado com sucesso! Nenhuma falha encontrada."

      - name: Salvar package.xml
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
