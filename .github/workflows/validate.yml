name: Validate Pull Request - PRD
on:
  pull_request:
    branches:
      - master
    paths:
      - 'force-app/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # Verifica se o Pull Request foi cancelado (fechado sem merge)
      - name: Verificar se o evento foi cancelado
        if: github.event.action == 'closed' && github.event.pull_request.merged == false
        run: |
          echo "O Pull Request foi cancelado. Saindo com erro."
          exit 1

      # Realiza o checkout do repositório
      - name: Checkout do repositório
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      # Instalar dependências do sistema e Salesforce CLI
      - name: Instalar dependências do sistema e do Salesforce CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl jq
          npm install @salesforce/cli --global

      # Autenticar com a org PRD
      - name: Autenticar com a org PRD
        run: |
          echo "${{ secrets.AUTH_URL_PRD }}" > sfdx-auth-url.txt
          sf org login sfdx-url -f sfdx-auth-url.txt --alias prd

      # Instalar o plugin sfdx-git-delta
      - name: Instalar plugin sfdx-git-delta
        run: echo "y" | sf plugins install sfdx-git-delta

      # Criar diretório para o pacote delta
      - name: Criar diretório de saída para o pacote delta
        run: mkdir -p deploy

      # Gerar pacote delta no diretório deploy
      - name: Gerar pacote delta no diretório deploy
        run: |
          sf sgd source delta --from origin/master --to HEAD --output-dir deploy

      # Listar conteúdo do diretório deploy
      - name: Listar conteúdo do diretório deploy
        run: ls -R deploy

      # Exibir conteúdo do package.xml
      - name: Exibir conteúdo do package.xml
        run: cat deploy/package/package.xml

      # CONVERTER METADATA
      - name: Convertendo Metadados do package
        run: |
          sfdx force:source:convert --manifest=deploy/package/package.xml --outputdir=convert

      # VERIFICAR SE HÁ CLASSES APEX
      - name: Verificar Classes Apex
        id: check-apex-classes
        run: |
          if grep -q '<name>ApexClass</name>' deploy/package/package.xml; then
            echo "Classes Apex encontradas."
            echo "has_apex_classes=true" >> $GITHUB_ENV
          else
            echo "Nenhuma classe Apex encontrada."
            echo "has_apex_classes=false" >> $GITHUB_ENV
          fi

      # Executar o deploy e testar
      - name: Executar Deploy e Testes
        run: |
              set -e  # Interrompe o script caso o deploy falhe
              if [ "${{ env.has_apex_classes }}" == "true" ]; then
              echo "Executando deploy com testes específicos."
              sf project deploy start --manifest deploy/package/package.xml --dry-run --test-level RunSpecifiedTests --tests UtilTest --tests ConciergeControllerTest --tests ConciergeServiceTest  --tests ConciergeControllerTest --tests ConciergeServiceTest --tests AccountControllerTest --tests AccountDATest --tests AccountHelperTest --tests ChecklistDATest --tests ChecklistHelperTest --tests ChecklistControllerTest --tests ChecklistTrigggerHandlerTest --tests ContractSelectorTest --tests ContractControllerTest --tests ContratoServiceTest --tests ContractDATest --tests ContractHelperTest --tests ContractTriggerHandlerTest --tests DocumentacaoDATest --tests DocumentControllerTest --tests DocumentacaoHelperTest --tests QuoteDATest --tests QuoteHelper --tests QuoteHelperTest --tests QueryHelperTest --tests QuoteLineItemHelper --tests QuoteLineItemHelperTest --tests QuoteLineItemTriggerHandler --tests QuoteLineItemTriggerHandlerTest --tests QuoteSyncHelper --tests QuoteSyncHelperTest --tests SalesTeamControllerTest --tests QuoteSyncTriggerHandler --tests QuoteSyncTriggerHandlerTest --tests QuoteTriggerHandler --tests QuoteTriggerHandlerTest --tests AccountContactRelationHelperTest --tests AnaliseCreditoHelperTest --tests AnaliseCreditoTriggerHandlerTest --tests TriggerHandler_Test --tests EmailManagerTest --tests ObjectHelperTest --tests ObjectControllerTest --tests OpportunityHelperTest --tests OpportunityTriggerHandlerTest --tests GerarContratoControllerTest --tests OpportunityDATest --tests IntegrationD4SignTest --tests AnaliseCreditoDATest --tests TemplateDocumentoHelperTest --tests UtilTest --tests TemplateDocumentoTriggerHandlerTest --tests TemplateDocumentoDATest --tests TemplateDocumentoControllerTest --tests TemplateDocumentoDATest --tests EmpreendimentoSelectorTest --tests ComparativoControllerTest --tests ComparativoServiceTest --tests EspelhoVendasControllerTest --tests comissaoControllerTest --tests CotacaoControllerTest --tests EspelhoVendasServiceTest --tests ExtratoTabelaServiceTest --tests ProdutoSelectorTest --tests SeriePagamentoSelectorTest --tests SeriePagamentosServiceTest --tests SimuladorVendasControllerTest --tests SeriePagamentosTriggerHandlerTest --tests SimuladorTelaNegociacaoControllerTest --tests TabelaVendaHandlerTest --tests TabelaVendaSelectorTest --tests TabelaVendasServiceTest --tests TestDataFactoryTest --tests TestDataFactorySimuladorTest --tests UnidadeTabelaSelectorTest --tests UnidadeTabelaServiceTest --tests ParametrizarCriterioServiceTest --tests ParametrizarCriterioControllerTest --target-org prd | tee deploy/deploy_output.log
              else
              echo "Executando deploy sem testes."
              sf project deploy start --manifest deploy/package/package.xml --dry-run --test-level NoTestRun --target-org prd | tee deploy/deploy_output.log
              fi

      # Verificar falhas no deploy
      - name: Verificar falhas no deploy
        run: |
          # Verifica falhas em componentes
          if grep -qi "Component Failures" deploy/deploy_output.log; then
            echo "❌ Falhas de componente detectadas! O deploy falhou."
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verifica falhas em testes
          if grep -qi "Assertion Failed" deploy/deploy_output.log; then
            echo "❌ Falhas nos testes detectadas!"
            cat deploy/deploy_output.log
            exit 1
          fi

           # Verifica cobertura de código insuficiente
          if grep -qi "Failing: [1-9][0-9]*" deploy/deploy_output.log; then
            echo "❌ Testes falhando detectados!"
            cat deploy/deploy_output.log
            exit 1
          fi


          # Verifica falhas em testes
          if grep -qi "System.DmlException: Insert failed" deploy/deploy_output.log; then
            echo "❌ Falhas nos testes detectadas!"
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verifica cobertura de código insuficiente
          if grep -qi "São necessários pelo menos 75% de cobertura do teste" deploy/deploy_output.log; then
            echo "❌ Cobertura de código insuficiente detectada!"
            cat deploy/deploy_output.log
            exit 1
          fi

          # Verificar se houve falhas durante a execução do dry-run
          if grep -qi "Failed to run" deploy/deploy_output.log; then
            echo "❌ O dry-run falhou!"
            cat deploy/deploy_output.log
            exit 1
          fi

          echo "✅ Deploy validado com sucesso! Nenhuma falha encontrada."

          
      # Definir nome do artefato com org, data e hora
      - name: Definir nome do artefato com org, data e hora
        id: set-artifact-name
        run: |
          ORG_NAME="PRD"
          export TZ="America/Sao_Paulo"  # Define o fuso horário para o Brasil (UTC-3)
          TIMESTAMP=$(date +'%d-%m-%Y--%H-%M-%S')  # Gera o timestamp no fuso horário do Brasil
          echo "PACKAGE_XML_ARTIFACT=${ORG_NAME}_Package_xml_${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "DEPLOY_LOG_ARTIFACT=${ORG_NAME}_Validade_log_${TIMESTAMP}" >> $GITHUB_OUTPUT

      # Salvar o package.xml como artefato
      - name: Salvar package.xml
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.PACKAGE_XML_ARTIFACT }}
          path: deploy/package/package.xml

      # Salvar o Log de Deploy como artefato
      - name: Salvar o Log de Deploy
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.DEPLOY_LOG_ARTIFACT }}
          path: deploy/deploy_output.log
